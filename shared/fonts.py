# -*- coding: utf-8 -*-


BIG_DIGITS = [[0]] * 0x30
BIG_DIGITS.extend([
        [0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00],  # '0'
        [0x44, 0x42, 0x7F, 0x40, 0x40, 0x00],  # '1'
        [0x62, 0x51, 0x51, 0x51, 0x4E, 0x00],  # '2'
        [0x22, 0x49, 0x49, 0x49, 0x36, 0x00],  # '3'
        [0x30, 0x28, 0x24, 0x22, 0x7F, 0x00],  # '4'
        [0x27, 0x45, 0x45, 0x45, 0x39, 0x00],  # '5'
        [0x3E, 0x45, 0x45, 0x45, 0x38, 0x00],  # '6'
        [0x01, 0x71, 0x09, 0x05, 0x03, 0x00],  # '7'
        [0x36, 0x49, 0x49, 0x49, 0x36, 0x00],  # '8'
        [0x0E, 0x51, 0x51, 0x51, 0x3E, 0x00],  # '9'
        [0x00, 0x00, 0x22, 0x00, 0x00, 0x00],  # ':'
    ])

SMALL_DIGITS = [[0]] * 0x30
SMALL_DIGITS.extend([
        [0x3E, 0x41, 0x41, 0x3E, 0x00],  # '0'
        [0x04, 0x42, 0x7F, 0x40, 0x00],  # '1'
        [0x62, 0x51, 0x51, 0x4E, 0x00],  # '2'
        [0x22, 0x49, 0x49, 0x36, 0x00],  # '3'
        [0x18, 0x14, 0x12, 0x7F, 0x00],  # '4'
        [0x27, 0x45, 0x45, 0x39, 0x00],  # '5'
        [0x3E, 0x45, 0x45, 0x38, 0x00],  # '6'
        [0x01, 0x71, 0x0D, 0x03, 0x00],  # '7'
        [0x36, 0x49, 0x49, 0x36, 0x00],  # '8'
        [0x0E, 0x51, 0x51, 0x3E, 0x00],  # '9'
        [0x00, 0x22, 0x00, 0x00, 0x00],  # ':'
    ])

MICRO_LETTERS = [[0]] * 0x20
MICRO_LETTERS.extend([
        [0x00, 0x00, 0x00, 0x00],  # ' '
        [0x00, 0x17, 0x00, 0x00],  # '!'
        [0x03, 0x00, 0x03, 0x00],  # '"'
        [0x1F, 0x0A, 0x1F, 0x00],  # '#'
        [0x16, 0x1F, 0x0D, 0x00],  # '$'
        [0x09, 0x04, 0x12, 0x00],  # '%'
        [0x0A, 0x15, 0x1A, 0x00],  # '&'
        [0x00, 0x03, 0x00, 0x00],  # '''
        [0x0E, 0x11, 0x00, 0x00],  # '('
        [0x00, 0x11, 0x0E, 0x00],  # ')'
        [0x0A, 0x07, 0x0A, 0x00],  # '*'
        [0x04, 0x0E, 0x04, 0x00],  # '+'
        [0x10, 0x08, 0x00, 0x00],  # ','
        [0x04, 0x04, 0x04, 0x00],  # '-'
        [0x00, 0x10, 0x00, 0x00],  # '.'
        [0x08, 0x04, 0x02, 0x00],  # '/'
        [0x1F, 0x11, 0x1F, 0x00],  # '0'
        [0x00, 0x00, 0x1F, 0x00],  # '1'
        [0x1D, 0x15, 0x17, 0x00],  # '2'
        [0x15, 0x15, 0x1f, 0x00],  # '3'
        [0x07, 0x04, 0x1F, 0x00],  # '4'
        [0x17, 0x15, 0x1D, 0x00],  # '5'
        [0x1F, 0x15, 0x1D, 0x00],  # '6'
        [0x01, 0x01, 0x1F, 0x00],  # '7'
        [0x1F, 0x15, 0x1F, 0x00],  # '8'
        [0x17, 0x15, 0x1F, 0x00],  # '9'
        [0x00, 0x0A, 0x00, 0x00],  # ':'
        [0x10, 0x0A, 0x00, 0x00],  # ';'

        [0x04, 0x0A, 0x11, 0x00],  # '<'
        [0x0A, 0x0A, 0x0A, 0x00],  # '='
        [0x11, 0x0A, 0x04, 0x00],  # '>'
        [0x01, 0x15, 0x07, 0x00],  # '?'
        [0x0E, 0x17, 0x16, 0x00],  # '@'
        [0x1E, 0x09, 0x1E, 0x00],  # 'A'
        [0x1F, 0x15, 0x0A, 0x00],  # 'B'
        [0x0E, 0x11, 0x11, 0x00],  # 'C'
        [0x1F, 0x11, 0x0E, 0x00],  # 'D'
        [0x1F, 0x15, 0x15, 0x00],  # 'E'
        [0x1F, 0x15, 0x01, 0x00],  # 'F'
        [0x0E, 0x11, 0x19, 0x00],  # 'G'
        [0x1F, 0x04, 0x1F, 0x00],  # 'H'
        [0x11, 0x1F, 0x11, 0x00],  # 'I'
        [0x11, 0x11, 0x0F, 0x00],  # 'J'
        [0x1F, 0x04, 0x1B, 0x00],  # 'K'
        [0x1F, 0x10, 0x10, 0x00],  # 'L'
        [0x1F, 0x02, 0x1F, 0x00],  # 'M'
        [0x1F, 0x01, 0x1F, 0x00],  # 'N'
        [0x0E, 0x11, 0x0E, 0x00],  # 'O'
        [0x1F, 0x09, 0x0F, 0x00],  # 'P'
        [0x0E, 0x11, 0x1E, 0x00],  # 'Q'
        [0x1F, 0x09, 0x16, 0x00],  # 'R'
        [0x17, 0x15, 0x1D, 0x00],  # 'S'
        [0x01, 0x1F, 0x01, 0x00],  # 'T'
        [0x1F, 0x10, 0x1F, 0x00],  # 'U'
        [0x0F, 0x10, 0x0F, 0x00],  # 'V'
        [0x1F, 0x08, 0x1F, 0x00],  # 'W'
        [0x1D, 0x04, 0x1D, 0x00],  # 'X'
        [0x07, 0x18, 0x07, 0x00],  # 'Y'
        [0x19, 0x15, 0x13, 0x00],  # 'Z'
        [0x1f, 0x11, 0x00, 0x00],  # '['
        [0x02, 0x04, 0x08, 0x00],  # '\'
        [0x00, 0x11, 0x1F, 0x00],  # ']'
        [0x02, 0x01, 0x02, 0x00],  # '^'
        [0x10, 0x10, 0x20, 0x00],  # '_'
        [0x01, 0x02, 0x00, 0x00],  # '`'
])


class ProportionalFont(object):
    def __init__(self, font, space_size=4):
        self.font = font
        self.spaceSize = space_size

    def __getitem__(self, ascii_code):
        try:
            bitmap = self.font[ascii_code]
            # Return a slim version of the space character
            result = self._trim(bitmap)

            if len(result) == 0:
                return [0] * self.spaceSize

            return result + [0]

        except IndexError:
            raise IndexError(f"Font does not have ASCII code: {ascii_code}")

    @staticmethod
    def _trim(arr):
        nonzero = [idx for idx, val in enumerate(arr) if val != 0]
        if not nonzero:
            return []
        first = nonzero[0]
        last = nonzero[-1] + 1
        return arr[first:last]

